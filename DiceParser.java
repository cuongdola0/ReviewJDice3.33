import java.util.*;
import java.util.logging.*;

/**
 * A parser for dice expressions such as "2d6+3; d10 & 3d4".
 * 
 * ‚úÖ CH·ª®C NƒÇNG M·ªöI: Logging b·∫±ng java.util.logging
 * - Ghi l·∫°i c√°c s·ª± ki·ªán quan tr·ªçng khi ph√¢n t√≠ch bi·ªÉu th·ª©c x√∫c x·∫Øc.
 * - Ghi log l·ªói n·∫øu input kh√¥ng h·ª£p l·ªá.
 * 
 * üîß L√Ω do: H·ªó tr·ª£ debug, ki·ªÉm tra ho·∫°t ƒë·ªông parser khi t√≠ch h·ª£p v√†o d·ª± √°n th·ª±c t·∫ø.
 */
public class DiceParser {

    /**
     * Logger d√πng ƒë·ªÉ ghi log to√†n b·ªô qu√° tr√¨nh ph√¢n t√≠ch c√∫ ph√°p.
     */
    private static final Logger logger = Logger.getLogger(DiceParser.class.getName());

    static {
        // C·∫•u h√¨nh ƒë∆°n gi·∫£n cho Logger
        Logger rootLogger = Logger.getLogger("");
        Handler consoleHandler = new ConsoleHandler();
        consoleHandler.setLevel(Level.FINE);
        rootLogger.addHandler(consoleHandler);
        logger.setLevel(Level.FINE);
    }

    /**
     * StringStream l√† m·ªôt l·ªõp h·ªó tr·ª£ ƒë·ªÉ qu·∫£n l√Ω chu·ªói ƒë·∫ßu v√†o trong vi·ªác ph√¢n t√≠ch c√∫ ph√°p.
     * N√≥ bao g·ªìm c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫Øt b·ªè kho·∫£ng tr·∫Øng, l·∫•y s·ªë nguy√™n, v√† ki·ªÉm tra c√°c bi·ªÉu th·ª©c.
     */
    private static class StringStream {
        StringBuffer buff;

        public StringStream(String s) {
            buff = new StringBuffer(s);
        }

        private void munchWhiteSpace() {
            int index = 0;
            char curr;
            while (index < buff.length()) {
                curr = buff.charAt(index);
                if (!Character.isWhitespace(curr))
                    break;
                index++;
            }
            buff = buff.delete(0, index);
        }

        public boolean isEmpty() {
            munchWhiteSpace();
            return buff.toString().equals("");
        }

        public Integer getInt() {
            return readInt();
        }

        public Integer readInt() {
            int index = 0;
            char curr;
            munchWhiteSpace();
            while (index < buff.length()) {
                curr = buff.charAt(index);
                if (!Character.isDigit(curr))
                    break;
                index++;
            }
            try {
                Integer ans = Integer.parseInt(buff.substring(0, index));
                buff = buff.delete(0, index);
                return ans;
            } catch (Exception e) {
                return null;
            }
        }

        public Integer readSgnInt() {
            munchWhiteSpace();
            StringStream state = save();
            if (checkAndEat("+")) {
                Integer ans = readInt();
                if (ans != null)
                    return ans;
                restore(state);
                return null;
            }
            if (checkAndEat("-")) {
                Integer ans = readInt();
                if (ans != null)
                    return -ans;
                restore(state);
                return null;
            }
            return readInt();
        }

        public boolean checkAndEat(String s) {
            munchWhiteSpace();
            if (buff.indexOf(s) == 0) {
                buff = buff.delete(0, s.length());
                return true;
            }
            return false;
        }

        public StringStream save() {
            return new StringStream(buff.toString());
        }

        public void restore(StringStream ss) {
            this.buff = new StringBuffer(ss.buff);
        }

        public String toString() {
            return buff.toString();
        }
    }

    /**
     * Parses a full dice expression with optional ";" separated parts.
     * 
     * @param input Chu·ªói bi·ªÉu th·ª©c x√∫c x·∫Øc (v√≠ d·ª•: "2d6+3; d10 & 3d4")
     * @return Danh s√°ch c√°c DieRoll ƒë√£ ph√¢n t√≠ch th√†nh c√¥ng ho·∫∑c null n·∫øu l·ªói.
     */
    public static Vector<DieRoll> parseRoll(String input) {
        logger.fine("Parsing input: " + input);
        StringStream stream = new StringStream(input.toLowerCase());
        Vector<DieRoll> result = parseRollRecursive(stream, new Vector<>());
        if (stream.isEmpty()) {
            logger.fine("Successfully parsed: " + input);
            return result;
        } else {
            logger.warning("Failed to fully parse input: " + input);
            return null;
        }
    }

    /**
     * Parse ph·∫ßn roll c·ªßa bi·ªÉu th·ª©c x√∫c x·∫Øc, s·ª≠ d·ª•ng ƒë·ªá quy n·∫øu c√≥ d·∫•u ph√¢n c√°ch ";"
     * 
     * @param ss Chu·ªói ƒë·∫ßu v√†o
     * @param v Danh s√°ch k·∫øt qu·∫£
     * @return Danh s√°ch c√°c DieRoll
     */
    private static Vector<DieRoll> parseRollRecursive(StringStream ss, Vector<DieRoll> v) {
        Vector<DieRoll> r = parseXDice(ss);
        if (r == null) {
            return null;
        }
        v.addAll(r);
        if (ss.checkAndEat(";")) {
            return parseRollRecursive(ss, v);
        }
        return v;
    }

    /**
     * Parse ph·∫ßn x√∫c x·∫Øc trong bi·ªÉu th·ª©c, c√≥ th·ªÉ c√≥ s·ªë l∆∞·ª£ng x√∫c x·∫Øc l·∫∑p l·∫°i (X)
     * 
     * @param ss Chu·ªói ƒë·∫ßu v√†o
     * @return Danh s√°ch DieRoll
     */
    private static Vector<DieRoll> parseXDice(StringStream ss) {
        StringStream saved = ss.save();
        Integer x = ss.getInt();
        int num = (x == null) ? 1 : x;
        if (ss.checkAndEat("x")) {
            num = x;
        } else {
            ss.restore(saved);
        }
        DieRoll dr = parseDice(ss);
        if (dr == null) {
            return null;
        }
        Vector<DieRoll> ans = new Vector<>();
        for (int i = 0; i < num; i++) {
            ans.add(dr);
        }
        return ans;
    }

    /**
     * Parse ph·∫ßn dice c·ªßa bi·ªÉu th·ª©c x√∫c x·∫Øc.
     * 
     * @param ss Chu·ªói ƒë·∫ßu v√†o
     * @return DieRoll ƒë√£ ph√¢n t√≠ch ho·∫∑c null n·∫øu l·ªói
     */
    private static DieRoll parseDice(StringStream ss) {
        return parseDTail(parseDiceInner(ss), ss);
    }

    /**
     * Parse ph·∫ßn dice c∆° b·∫£n trong bi·ªÉu th·ª©c x√∫c x·∫Øc, bao g·ªìm s·ªë x√∫c x·∫Øc v√† s·ªë m·∫∑t.
     * 
     * @param ss Chu·ªói ƒë·∫ßu v√†o
     * @return DieRoll ƒë√£ ph√¢n t√≠ch ho·∫∑c null n·∫øu l·ªói
     */
    private static DieRoll parseDiceInner(StringStream ss) {
        Integer num = ss.getInt();
        int ndice = (num == null) ? 1 : num;
        if (ss.checkAndEat("d")) {
            num = ss.getInt();
            if (num == null) {
                return null;
            }
            int dsides = num;
            num = ss.readSgnInt();
            int bonus = (num == null) ? 0 : num;
            return new DieRoll(ndice, dsides, bonus);
        } else {
            return null;
        }
    }

    /**
     * Ki·ªÉm tra ph·∫ßn tail c·ªßa bi·ªÉu th·ª©c x√∫c x·∫Øc (s·ª≠ d·ª•ng to√°n t·ª≠ '&' n·ªëi nhi·ªÅu dice)
     * 
     * @param r1 DieRoll ƒë·∫ßu ti√™n
     * @param ss Chu·ªói ƒë·∫ßu v√†o
     * @return DieRoll ƒë√£ ph√¢n t√≠ch
     */
    private static DieRoll parseDTail(DieRoll r1, StringStream ss) {
        if (r1 == null) {
            return null;
        }
        if (ss.checkAndEat("&")) {
            DieRoll d2 = parseDice(ss);
            return parseDTail(new DiceSum(r1, d2), ss);
        } else {
            return r1;
        }
    }

    /**
     * Test method to evaluate expressions with logging and output.
     * 
     * @param input Bi·ªÉu th·ª©c x√∫c x·∫Øc ƒë·ªÉ test
     */
    private static void test(String input) {
        Vector<DieRoll> rolls = parseRoll(input);
        if (rolls == null) {
            System.out.println("Invalid input: " + input);
        } else {
            System.out.println("Parsing: " + input);
            for (DieRoll roll : rolls) {
                System.out.println(roll + ": " + roll.makeRoll());
            }
        }
    }

    /**
     * Main method ƒë·ªÉ ki·ªÉm th·ª≠ nhanh c√°c bi·ªÉu th·ª©c dice.
     */
    public static void main(String[] args) {
        test("d6");
        test("2d6");
        test("d6+5");
        test("4X3d8-5");
        test("12d10+5 & 4d6+2");
        test("d6 ; 2d4+3");
        test("4d6+3 ; 8d12 -15 ; 9d10 & 3d6 & 4d12 +17");
        test("4d4d4");
        test("hi");
    }
}